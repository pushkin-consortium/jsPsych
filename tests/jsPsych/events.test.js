import jsPsych from '../../src/jspsych';
import utils from '../testing-utils';

beforeEach(() => {
  require('../../src/jspsych');
  require('../../plugins/jspsych-html-keyboard-response');
});

describe('on_finish (trial)', () => {
  test('should get an object of data generated by the trial', () => (new Promise(((resolve, reject) => {
    let key_data = null;

    const trial = {
      type: 'html-keyboard-response',
      stimulus: 'hello',
      on_finish(data) {
        key_data = data.key_press;
      },
    };

    jsPsych.init({
      timeline: [trial],
      on_finish() {
        resolve({ key_data });
      },
    });

    utils.pressKey(32);
  }))).then((data) => { expect(data.key_data).toBe(32); }));

  test('should be able to write to the data', () => (new Promise(((resolve, reject) => {
    const promise_data = {};

    const trial = {
      type: 'html-keyboard-response',
      stimulus: 'hello',
      on_finish(data) {
        data.key_press = 1;
      },
    };

    jsPsych.init({
      timeline: [trial],
      on_finish() {
        promise_data.final_key_press = jsPsych.data.get().values()[0].key_press;
        resolve(promise_data);
      },
    });

    utils.pressKey(32);

    // resolve();
  }))).then((pd) => {
    expect(pd.final_key_press).toBe(1);
  }));
});

describe('on_start (trial)', () => {
  test('should get trial data with function parameters evaluated', () => (new Promise(((resolve, reject) => {
    let d = null;

    const trial = {
      type: 'html-keyboard-response',
      stimulus() { return 'hello'; },
      on_start(trial) {
        d = trial.stimulus;
      },
    };

    jsPsych.init({
      timeline: [trial],
      on_finish() {
        resolve(d);
      },
    });

    utils.pressKey(32);
  }))).then((data) => { expect(data).toBe('hello'); }));

  test('should get trial data with timeline variables evaluated', () => (new Promise(((resolve, reject) => {
    let d = null;

    const trial = {
      timeline: [{
        type: 'html-keyboard-response',
        stimulus: jsPsych.timelineVariable('stimulus'),
        on_start(trial) {
          d = trial.stimulus;
        },
      }],
      timeline_variables: [{ stimulus: 'hello' }],
    };

    jsPsych.init({
      timeline: [trial],
      on_finish() {
        resolve(d);
      },
    });

    utils.pressKey(32);
  }))).then((data) => { expect(data).toBe('hello'); }));
});

describe('on_trial_finish (experiment level)', () => {
  test('should get an object containing the trial data', () => (new Promise(((resolve, reject) => {
    const promise_data = {};

    const trial = {
      type: 'html-keyboard-response',
      stimulus: 'hello',
    };

    jsPsych.init({
      timeline: [trial],
      on_trial_finish(data) {
        promise_data.key = data.key_press;
      },
      on_finish() {
        resolve(promise_data);
      },
    });

    utils.pressKey(32);

    // resolve();
  }))).then((pd) => {
    expect(pd.key).toBe(32);
  }));

  test('should allow writing to the data object', () => (new Promise(((resolve, reject) => {
    const promise_data = {};

    const trial = {
      type: 'html-keyboard-response',
      stimulus: 'hello',
    };

    jsPsych.init({
      timeline: [trial],
      on_trial_finish(data) {
        data.write = true;
      },
      on_finish(data) {
        promise_data.write = data.values()[0].write;
        resolve(promise_data);
      },
    });

    utils.pressKey(32);

    // resolve();
  }))).then((pd) => {
    expect(pd.write).toBe(true);
  }));
});

describe('on_data_update', () => {
  test('should get an object containing the trial data', () => (new Promise(((resolve, reject) => {
    const promise_data = {};

    const trial = {
      type: 'html-keyboard-response',
      stimulus: 'hello',
    };

    jsPsych.init({
      timeline: [trial],
      on_data_update(data) {
        promise_data.key = data.key_press;
      },
      on_finish() {
        resolve(promise_data);
      },
    });

    utils.pressKey(32);

    // resolve();
  }))).then((pd) => {
    expect(pd.key).toBe(32);
  }));

  test('should contain data with null values', () => {
    require('../../plugins/jspsych-html-slider-response.js');

    return (new Promise(((resolve, reject) => {
      const promise_data = [];

      const trial = {
        type: 'html-keyboard-response',
        stimulus: 'hello',
        trial_duration: 10,
      };

      const trial_2 = {
        type: 'html-slider-response',
        stimulus: 'hello',
        trial_duration: 10,
      };

      jsPsych.init({
        timeline: [trial, trial_2],
        on_data_update(data) {
          promise_data.push(data);
        },
        on_finish() {
          resolve(promise_data);
        },
      });

      // resolve();
    }))).then((pd) => {
      expect(pd[0].key_press).not.toBeUndefined();
      expect(pd[0].key_press).toBeNull();
      expect(pd[1].response).toBeNull();
      expect(pd[1].rt).toBeNull();
    });
  });

  test('should contain data added with on_finish (trial level)', () => (new Promise(((resolve, reject) => {
    const promise_data = {};

    const trial = {
      type: 'html-keyboard-response',
      stimulus: 'hello',
      on_finish(data) {
        data.trial_level = true;
      },
    };

    jsPsych.init({
      timeline: [trial],
      on_data_update(data) {
        promise_data.trial_level = data.trial_level;
      },
      on_finish() {
        resolve(promise_data);
      },
    });

    utils.pressKey(32);

    // resolve();
  }))).then((pd) => {
    expect(pd.trial_level).toBe(true);
  }));

  test('should contain data added with on_trial_finish (experiment level)', () => (new Promise(((resolve, reject) => {
    const promise_data = {};

    const trial = {
      type: 'html-keyboard-response',
      stimulus: 'hello',
    };

    jsPsych.init({
      timeline: [trial],
      on_trial_finish(data) {
        data.experiment_level = true;
      },
      on_data_update(data) {
        promise_data.experiment_level = data.experiment_level;
      },
      on_finish() {
        resolve(promise_data);
      },
    });

    utils.pressKey(32);

    // resolve();
  }))).then((pd) => {
    expect(pd.experiment_level).toBe(true);
  }));
});

describe('on_trial_start', () => {
  test('should get an object containing the trial properties', () => (new Promise(((resolve, reject) => {
    const promise_data = {};

    const trial = {
      type: 'html-keyboard-response',
      stimulus: 'hello',
    };

    jsPsych.init({
      timeline: [trial],
      on_trial_start(trial) {
        promise_data.text = trial.stimulus;
      },
      on_finish() {
        resolve(promise_data);
      },
    });

    utils.pressKey(32);

    // resolve();
  }))).then((pd) => {
    expect(pd.text).toBe('hello');
  }));

  test('should allow modification of the trial properties', () => {
    const trial = {
      type: 'html-keyboard-response',
      stimulus: 'hello',
    };

    jsPsych.init({
      timeline: [trial],
      on_trial_start(trial) {
        trial.stimulus = 'goodbye';
      },
    });

    const display_element = jsPsych.getDisplayElement();
    expect(display_element.innerHTML).toMatch('goodbye');

    utils.pressKey(32);
  });
});
